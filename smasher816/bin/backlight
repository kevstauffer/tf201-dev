#!/usr/bin/env python

#Imports
import os, sys
import tty, termios, argparse

#Constants
SYS_BACKLIGHT = '/sys/devices/platform/pwm-backlight/backlight/pwm-backlight/'
SYS_POWER = SYS_BACKLIGHT + 'bl_power'
SYS_BRIGHTNESS = SYS_BACKLIGHT + 'brightness'
SYS_BRIGHTNESS_MAX = SYS_BACKLIGHT + 'max_brightness'

#####################
# Utility Functions #
#####################

#Get a single keypress
def getKey():
	fd = sys.stdin.fileno()
	old_settings = termios.tcgetattr(fd) #Preserve attrs
	try:
		tty.setraw(sys.stdin.fileno()) #Don't wait for enter (raw)
		ch = sys.stdin.read(1) #get key
	finally:
		termios.tcsetattr(fd, termios.TCSADRAIN, old_settings) #Restore attrs
	return ch

#Convert percent to a raw screen brightness value
def percentToRaw(percent, ips=False, raw=False):
	if ips and raw:
		sys.exit('Error: Can only specify one mode')

	brightness = int(percent) #0-255 raw

	if not raw:
		if percent < 0: percent = 0
		if percent > 100: percent = 100

		if ips:
			brightness = int(percent/100*210+45) #45-255 raw
		else: #normal
			brightness = int(percent/100*150+10) #10-160 raw

	if brightness < 0: brightness = 0
	if brightness > 100: brightness = 100
	return brightness

#Convert raw brightness to the percent (0-100) of a mode 
def rawToPercent(brightness, ips=False, raw=False):
	if ips and raw:
		sys.exit('Error: Can only specify one mode')

	if ips:
		percent = (brightness-45)/210*100 #Can be under 0 if not ips
	elif raw:
		percent = (brightness-0)/255*100
	else:
		percent = (brightness-10)/150*100 #Can be over 100 if actually ips

	if percent < 0:   percent = 0
	if percent > 100: percent = 100
	return int(percent)

#Read a sysfs file
def readSysfs(device):
	if not os.access(device, os.F_OK):
		sys.exit('Error: ' + device + ' is not a valid device')
	if not os.access(device, os.R_OK):
		sys.exit('Error: you do not have permission to write to ' + device + '\nTry running as root')
	dev = open(device, 'r')
	data = dev.read()
	dev.close()
	return data

#Write to a sysfs file
def writeSysfs(data, device):
	if not os.access(device, os.F_OK):
		sys.exit('Error: ' + device + ' is not a valid device')
	if not os.access(device, os.W_OK):
		sys.exit('Error: you do not have permission to write to ' + device + '\nTry running as root')
	dev = open(device, 'w')
	dev.write(data)
	dev.close()

###################
# Device Controll #
###################

#Return if the screen backlight is on
def getPower(device):
	if device==None: device=SYS_POWER
	powered = True
	if readSysfs(device)=='0': powered = False
	return ret

#Enable or disable the screen backlight. WARNING: CAN FREEZE DEVICE
def setPower(powered, device):
	if device==None: device=SYS_POWER
	str = '0'
	if not power: str='1'
	writeSysfs(str, device) # '0'=On, '1'=Off

#Return the current brightness
def getBrightness(device=None):
	if device==None: device=SYS_BRIGHTNESS
	return int( readSysfs(device) )

#Set the screen backlight brightness
def setBrightness(brightness, device=None):
	if device==None: device=SYS_BRIGHTNESS

	#Make sure the value is in the acceptable range
	brightness_max = int( readSysfs(SYS_BRIGHTNESS_MAX) )
	if brightness < 1: brightness = 1 #0 is off, use power instead
	if brightness > brightness_max: brightness = brightness_max

	#Change the brightness
	writeSysfs( str(brightness), device )

#############
# Main Code #
#############

#Use keys to dynamically change the brightness
def interact(device=None):
	#Get current brightness
	raw = getBrightness(device)
	ips = False
	if raw > 160: ips=True
	brightness, ips = rawToPercent(raw, ips)
	brightness = int( int(brightness/5)*5 ) #Round to the nearest multiple of 5

	#Controlls
	output = ''
	help = 'Q to quit, + to increase, - to decrease, I to toggle IPS'
	print(help)

	#Input loop
	while True:
		#Format the output
		output = '['
		for i in range(0,3-len(str(brightness)),1): output += ' ' #Numerical brightness
		output += str(brightness) + ']['
		for i in range(0,brightness,5): output += '#'             #Fill in a progress bar
		for i in range(brightness,100,5): output += '-'
		output += ']'
		if ips: output += '[IPS]'                                 #IPS status
		else: output += '[   ]'

		#Redraw the output
		sys.stdout.write('\r'+output)
		sys.stdout.flush()

		#Interpret keypress
		key = getKey()
		if key == 'q' or key == 'Q': break
		if key == '+' or key == '=': brightness += 5
		if key == '-' or key == '_': brightness -= 5
		if key == 'i' or key == 'I': ips = not ips

		#Cap the ends
		if brightness < 0: brightness = 0
		if brightness > 100: brightness = 100

		#Change brightness
		setBrightness( percentToRaw(brightness, ips, false, device) )

	#Clear line when done
	tmp = '\r'
	for i in range(0,len(output),1): tmp += ' '
	tmp += '\033[F\r'
	for i in range(0,len(help),1): tmp += ' '
	tmp += '\033[F'
	print(tmp)

#Program start
def init():
	#Get command line arguments
	parser = argparse.ArgumentParser(description='Set display backlight brightness')
	parser.add_argument('-i', '--ips', action='store_true', help='Enable Super IPS Mode')
	parser.add_argument('-r', '--raw', action='store_true', help='Set the raw value (0-255)')
	parser.add_argument('-p', '--power', action='store', type=int, default='-1', help='Turn on or off the display')
	parser.add_argument('-d', '--device', action='store', help='the /sys device to use')
	parser.add_argument('-s', '--set', action='store', type=int, dest='brightness', default='-1', help='Percent of screen brighness')
	parser.add_argument('--inc', action='store', type=int, default='-1', help='Increase the brightness by a percent')
	parser.add_argument('--dec', action='store', type=int, default='-1', help='Decrease the brightness by a percent')
	parser.add_argument('--interactive', action='store_true', help='Dynamically controll brightness with keyboard')
	args = parser.parse_args()

	brightness = rawToPercent(getBrightness(), args.ips, args.raw)

	#Do stuff
	if args.interactive:
		interact(args.device)
	elif args.power != -1:
		setPower(args.power, args.device)
	elif args.brightness != -1:
		setBrightness( percentToRaw(args.brightness, args.ips, args.raw), args.device )
	elif args.inc > 0:
		setBrightness( percentToRaw(brightness+args.inc, args.ips, args.raw), args.device )
	elif args.dec > 0:
		setBrightness( percentToRaw(brightness-args.dec, args.ips, args.raw), args.device )
	else:
		print( str(brightness) )

init()
