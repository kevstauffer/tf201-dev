diff -urNw stock-kernel/drivers/input/asusec/asusdec.c linux/drivers/input/asusec/asusdec.c
--- stock-kernel/drivers/input/asusec/asusdec.c	2012-09-13 08:32:35.000000000 +0200
+++ linux/drivers/input/asusec/asusdec.c	2013-02-01 01:16:38.970000669 +0100
@@ -453,7 +453,7 @@
 static void asusdec_fw_reset_ec_op(void){
 	char i2c_data[32];
 	int i;
-	int r_data[32];
+	//int r_data[32];

 	asusdec_fw_clear_buf();

@@ -468,7 +468,7 @@
 static void asusdec_fw_address_set_op(void){
 	char i2c_data[32];
 	int i;
-	int r_data[32];
+	//int r_data[32];

 	asusdec_fw_clear_buf();

@@ -487,7 +487,7 @@
 static void asusdec_fw_enter_op(void){
 	char i2c_data[32];
 	int i;
-	int r_data[32];
+	//int r_data[32];

 	asusdec_fw_clear_buf();

@@ -872,7 +872,9 @@
 {
 	int rc = 0 ;
 	unsigned gpio = asusdec_ecreq_gpio;
+#if ASUSDEC_DEBUG
 	unsigned irq = gpio_to_irq(asusdec_apwake_gpio);
+#endif
 	const char* label = "asusdec_request" ;

 	ASUSDEC_INFO("gpio = %d, irq = %d\n", gpio, irq);
@@ -1454,7 +1456,7 @@

 static void asusdec_dock_status_report(void){
 	ASUSDEC_INFO("dock_in = %d\n", ec_chip->dock_in);
-	switch_set_state(&ec_chip->dock_sdev, switch_value[ec_chip->dock_type]);
+	switch_set_state(&ec_chip->dock_sdev, (int)switch_value[ec_chip->dock_type]);
 #if BATTERY_DRIVER
 	queue_delayed_work(asusdec_wq, &ec_chip->asusdec_pad_battery_report_work, 0);
 #endif
@@ -1538,7 +1540,7 @@
 static void asusdec_dock_init_work_function(struct work_struct *dat)
 {
 	int gpio = asusdec_dock_in_gpio;
-	int irq = gpio_to_irq(gpio);
+	//int irq = gpio_to_irq(gpio);
 	int i = 0;
 	int d_counter = 0;
 	int gpio_state = 0;
@@ -1673,14 +1675,15 @@

 static void asusAudiodec_work_function(struct work_struct *dat)
 {
-	// Audio Dock EC function Service
-	ASUSDEC_NOTICE("cmd 0x6a i2c_smbus read 8 byte datas\n");
-	int ret_val = 0;
+	//int ret_val = 0;
 	int mcu_cable_type = 0, bat_cable_type = 0;
 	int gpio = asusdec_apwake_gpio;
 	int irq = gpio_to_irq(gpio);

-	ret_val = asusdec_i2c_read_data(ec_chip->client);
+	// Audio Dock EC function Service
+	ASUSDEC_NOTICE("cmd 0x6a i2c_smbus read 8 byte datas\n");
+
+	/*ret_val =*/ asusdec_i2c_read_data(ec_chip->client);
 #if BATTERY_DRIVER
 		if (ec_chip->dock_type == AUDIO_DOCK) {
 			mcu_cable_type = asusAudiodec_cable_type_callback();
diff -urNw stock-kernel/drivers/input/asusec/asusdec.h linux/drivers/input/asusec/asusdec.h
--- stock-kernel/drivers/input/asusec/asusdec.h	2012-09-13 08:32:35.000000000 +0200
+++ linux/drivers/input/asusec/asusdec.h	2013-01-21 16:39:43.490024735 +0100
@@ -25,14 +25,14 @@
 						for (i = 0; i < array[0]+1; i++) \
 							ASUSDEC_INFO("ec_data[%d] = 0x%x\n", i, array[i]);	\
 					} while(0)
+#define ASUSDEC_NOTICE(format, arg...)  \
+        printk(KERN_NOTICE "asusdec: [%s] " format , __FUNCTION__ , ## arg)
 #else
 #define ASUSDEC_INFO(format, arg...)
 #define ASUSDEC_I2C_DATA(array, i)
+#define ASUSDEC_NOTICE(format, arg...)
 #endif

-#define ASUSDEC_NOTICE(format, arg...)	\
-	printk(KERN_NOTICE "asusdec: [%s] " format , __FUNCTION__ , ## arg)
-
 #define ASUSDEC_ERR(format, arg...)	\
 	printk(KERN_ERR "asusdec: [%s] " format , __FUNCTION__ , ## arg)

@@ -45,7 +45,6 @@
 #define ASUSDEC_I2C_ERR_TOLERANCE	8
 #define ASUSDEC_RETRY_COUNT		3
 #define ASUSDEC_POLLING_RATE		80
-
 #define ASUSDEC_OBF_MASK		0x1
 #define ASUSDEC_KEY_MASK		0x4
 #define ASUSDEC_KBC_MASK		0x8
diff -urNw stock-kernel/drivers/input/asusec/elan_i2c_asus.c linux/drivers/input/asusec/elan_i2c_asus.c
--- stock-kernel/drivers/input/asusec/elan_i2c_asus.c	2012-09-13 08:32:35.000000000 +0200
+++ linux/drivers/input/asusec/elan_i2c_asus.c	2013-02-02 02:38:59.330003817 +0100
@@ -6,6 +6,7 @@
 #include <linux/interrupt.h>
 #include <linux/init.h>
 #include <linux/input.h>
+#include <linux/input/mt.h>
 #include <asm/gpio.h>
 #include <linux/workqueue.h>
 #include <linux/cdev.h>
@@ -30,7 +31,9 @@
 	int i;
 	int retry_data_count;
 	u8 i2c_data[16];
+#if ASUSDEC_DEBUG
 	int index;
+#endif

 	ELAN_INFO("command = 0x%x\n",command);
 	asus_ec_cmd = (((command & 0x00ff) << 8) | 0xD4);
@@ -77,95 +80,68 @@
 /*
  * Interpret complete data packets and report absolute mode input events for
  * hardware version 2. (6 byte packets)
+ * HACKED version: don't write anything in asus structs,
+ * just report position/keys/pressure to kernel.
  */
 void elantech_report_absolute_to_related(struct asusdec_chip *ec_chip, int *Null_data_times)
 {
-	struct elantech_data *etd;
 	struct input_dev *dev;
 	unsigned char *packet;
-	unsigned int fingers;
-	unsigned int width = 0;
-	int left_button, right_button;
-	int x, y;
-	int last_fingers;
-	int i;
+	int fingers,x,y,h_value,width;

-	etd = (struct elantech_data *) ec_chip->private;
-	dev = etd->abs_dev;
- 	packet = ec_chip->ec_data;
+	/* fingers => how many fingers are now on the touchpad
+	 * x => current X position
+	 * y => current y position
+	 * h_value => current Z position ( pressure on the touchpad )
+	 * width => width of touched area
+	 */

-	// Report multitouch events for fingers.
+	packet = ec_chip->ec_data;
+	dev = ec_chip->private->abs_dev;
 	fingers = (packet[0] & 0xc0) >> 6;
 	x = ((packet[1] & 0x0f) << 8) | packet[2];
-	y = etd->ymax - (((packet[4] & 0x0f) << 8) | packet[5]);
-	//printk("fingers=%d, x=%d, y=%d, packet=%02x,%02x,%02x,%02x,%02x,%02x\n", fingers, x, y, packet[0], packet[1], packet[2], packet[3], packet[4], packet[5]);
+	y = ETP_YMAX_V2 - (((packet[4] & 0x0f) << 8) | packet[5]);
         width = ((packet[0] & 0x30) >> 2) | ((packet[3] & 0x30) >> 4);
+	h_value = ((packet[4] & 0xf0) >> 4) | (packet[1] & 0xf0);

-	last_fingers = etd->fingers;
-
-	switch (fingers) {
-		case 0:
-			// No fingers down.
-			etd->fingers = 0;
-			break;
+	input_report_key(dev, BTN_LEFT, (packet[0] & 0x01));
+	input_report_key(dev, BTN_RIGHT, (packet[0] & 0x02) >> 1);
+	input_report_key(dev, BTN_TOUCH, fingers != 0);
+	input_report_key(dev, BTN_TOOL_FINGER, fingers == 1);
+	input_report_key(dev, BTN_TOOL_DOUBLETAP, fingers == 2);
+	input_report_key(dev, BTN_TOOL_TRIPLETAP, fingers == 3);
+	input_report_key(dev, BTN_TOOL_QUADTAP, fingers == 4);

+	switch(fingers)
+	{
 		case 1:
-			// One finger down.
-			etd->fingers = 1;
-			etd->pos[0].x = x;
-			etd->pos[0].y = y;
+			input_mt_slot(dev, 0);
+			input_mt_report_slot_state(dev, MT_TOOL_FINGER, true);
+			input_report_abs(dev, ABS_MT_POSITION_X, x);
+			input_report_abs(dev, ABS_MT_POSITION_Y, y);
+			input_report_abs(dev, ABS_MT_TOUCH_MAJOR, width);
+			input_report_abs(dev, ABS_MT_PRESSURE, h_value);
+			input_mt_slot(dev, 1);
+			input_mt_report_slot_state(dev, MT_TOOL_FINGER, false);
 			break;
-
 		case 2:
-			// Two fingers down.
-			// Wait to get data from both fingers.
-			if (etd->fingers != 2) {
-				etd->fingers = 2;
-				etd->pos[0].x = -1;
-				etd->pos[1].x = -1;
-			}
-			if ((packet[0] & 0x0c) == 0x04) {
-				etd->pos[0].x = x;
-				etd->pos[0].y = y;
-			} else {
-				etd->pos[1].x = x;
-				etd->pos[1].y = y;
-			}
-			if (etd->pos[0].x < 0 || etd->pos[1].x < 0)
-				return;
-			break;
-
-		case 3:
-			// Three or more fingers down.
-			// Wait for at least one finger to go up.
-			return;
-	}
-
-	// Send finger reports.
-	if (etd->fingers) {
-		for (i = 0; i < etd->fingers; i++) {
+			if ((packet[0] & 0x0c) == 0x04) // custom asus stuff i think...
+				input_mt_slot(dev, 0); // this tell us if current data is related to finger 1 or 2
+			else
+				input_mt_slot(dev, 1);
+			input_mt_report_slot_state(dev, MT_TOOL_FINGER, true);
+			input_report_abs(dev, ABS_MT_POSITION_X, x);
+			input_report_abs(dev, ABS_MT_POSITION_Y, y);
 			input_report_abs(dev, ABS_MT_TOUCH_MAJOR, width);
-			input_report_abs(dev, ABS_MT_POSITION_X, etd->pos[i].x);
-			input_report_abs(dev, ABS_MT_POSITION_Y, etd->pos[i].y);
-			input_mt_sync(dev);
-		}
-	} else if (last_fingers) {
-		input_mt_sync(dev);
-	}
-
-	// Send button press / release events.
-	left_button = (packet[0] & 0x01);
-	if (left_button != etd->left_button) {
-		input_report_key(dev, BTN_LEFT, left_button);
-		etd->left_button = left_button;
-	}
-
-	right_button = (packet[0] & 0x02) >> 1;
-	if (right_button != etd->right_button) {
-		input_report_key(dev, BTN_RIGHT, right_button);
-		etd->right_button = right_button;
+			input_report_abs(dev, ABS_MT_PRESSURE, h_value);
+			break;
+		case 0:
+			input_mt_slot(dev, 0);
+			input_mt_report_slot_state(dev, MT_TOOL_FINGER, false);
+			input_mt_slot(dev, 1);
+			input_mt_report_slot_state(dev, MT_TOOL_FINGER, false);
 	}
-
+	input_mt_report_pointer_emulation(dev, true);
 	input_sync(dev);
 }

@@ -195,13 +171,13 @@
 	return -1;
 }

-
 /*
  * Set the appropriate event bits for the input subsystem
  */
 static int elantech_set_input_rel_params(struct asusdec_chip *ec_chip)
 {
 	struct elantech_data *etd = ec_chip->private;
+	struct input_dev *dev;
 	unsigned char param[3];
 	int ret;

@@ -224,11 +200,12 @@
 		etd->xmax = (0x0F & param[0]) << 8 | param[1];
 		etd->ymax = (0xF0 & param[0]) << 4 | param[2];

-		etd->abs_dev = input_allocate_device();
+		dev = etd->abs_dev = input_allocate_device();
 		ELAN_INFO("1 elantech_touchscreen=%p\n",etd->abs_dev);
 		if (etd->abs_dev != NULL){
 			ELAN_INFO("2 elantech_touchscreen=%p\n",etd->abs_dev);
 			etd->abs_dev->name = "elantech_touchscreen";
+			/* STOCK ASUS
 			etd->abs_dev->evbit[0] = BIT_MASK(EV_KEY) | BIT_MASK(EV_SYN);
 			etd->abs_dev->keybit[BIT_WORD(BTN_MOUSE)] = BIT_MASK(BTN_LEFT) | BIT_MASK(BTN_RIGHT);

@@ -238,6 +215,42 @@
 			input_set_abs_params(etd->abs_dev, ABS_MT_POSITION_X, 0, etd->xmax, 0, 0);
 			input_set_abs_params(etd->abs_dev, ABS_MT_POSITION_Y, 0, etd->ymax, 0, 0);
 			input_set_abs_params(etd->abs_dev, ABS_MT_TOUCH_MAJOR, 0, ETP_WMAX_V2, 0, 0);
+			*/
+
+			// DEFAULT from elantech.c
+
+			dev->phys = ec_chip->client->adapter->name;
+			dev->id.bustype = BUS_I2C;
+
+			__set_bit(EV_KEY, dev->evbit);
+			__set_bit(EV_ABS, dev->evbit);
+			__clear_bit(EV_REL, dev->evbit);
+
+			__set_bit(BTN_LEFT, dev->keybit);
+			__set_bit(BTN_RIGHT, dev->keybit);
+
+			__set_bit(BTN_TOUCH, dev->keybit);
+			__set_bit(BTN_TOOL_FINGER, dev->keybit);
+			__set_bit(BTN_TOOL_DOUBLETAP, dev->keybit);
+			__set_bit(BTN_TOOL_TRIPLETAP, dev->keybit);
+			__set_bit(BTN_TOOL_QUADTAP, dev->keybit);
+
+			__set_bit(INPUT_PROP_SEMI_MT, dev->propbit);
+
+			/* Touch area X Y Value */
+			input_set_abs_params(dev, ABS_X, ETP_XMIN_V2, ETP_XMAX_V2, 0, 0);
+			input_set_abs_params(dev, ABS_Y, ETP_YMIN_V2, ETP_YMAX_V2, 0, 0);
+			/* Finger Pressure value */
+			input_set_abs_params(dev, ABS_MT_PRESSURE, ETP_PMIN_V2, ETP_PMAX_V2, 0, 0);
+
+			/* Palme Value */
+			input_set_abs_params(dev, ABS_MT_TOUCH_MAJOR, ETP_WMIN_V2, ETP_WMAX_V2, 0, 0);
+
+			/* Fingers X Y values */
+			input_mt_init_slots(dev, 2);
+			input_set_abs_params(dev, ABS_MT_POSITION_X, ETP_XMIN_V2, ETP_XMAX_V2, 0, 0);
+			input_set_abs_params(dev, ABS_MT_POSITION_Y, ETP_YMIN_V2, ETP_YMAX_V2, 0, 0);
+

 			ret=input_register_device(etd->abs_dev);
 			if (ret) {
@@ -252,7 +265,6 @@

 }

-
 /*
  * Use magic knock to detect Elantech touchpad
  */
@@ -293,6 +305,7 @@
 {
 	ELAN_INFO("Elan et1059 elantech_init\n");

+
 	if (elantech_set_absolute_mode(ec_chip)){
 		ELAN_ERR("failed to put touchpad into absolute mode.\n");
 		return -1;
@@ -301,6 +314,7 @@
 		ELAN_ERR("failed to elantech_set_input_rel_params.\n");
 		return -1;
 	}
+
 	//elan_i2c_asus_cmd(ec_chip->client,  NULL, PSMOUSE_CMD_ENABLE);
 	return 0;
 }
diff -urNw stock-kernel/drivers/input/asusec/elan_i2c_asus.h linux/drivers/input/asusec/elan_i2c_asus.h
--- stock-kernel/drivers/input/asusec/elan_i2c_asus.h	2012-09-13 08:32:35.000000000 +0200
+++ linux/drivers/input/asusec/elan_i2c_asus.h	2013-02-01 13:47:42.850001138 +0100
@@ -2,6 +2,7 @@
 #define _ELAN_I2C_ASUS_H

 #include "asusdec.h"
+#include <linux/input.h>

 #define ELAN_DEBUG			0
 #if ELAN_DEBUG
@@ -99,7 +100,7 @@
  * Hence the X and Y ranges are doubled too.
  * The bezel around the pad also appears to be smaller
  */
-#define ETP_EDGE_FUZZ_V2		0
+#define ETP_EDGE_FUZZ_V2		8

 #define ETP_XMIN_V2			(   0 + ETP_EDGE_FUZZ_V2)
 #define ETP_XMAX_V2			(1152 - ETP_EDGE_FUZZ_V2)
@@ -109,11 +110,16 @@
 #define ETP_WMIN_V2                     0
 #define ETP_WMAX_V2                     15

+#define ETP_PMIN_V2			0
+#define ETP_PMAX_V2			255
+#define ETP_WMIN_V2			0
+#define ETP_WMAX_V2			15
+
 /*
  * For two finger touches the coordinate of each finger gets reported
  * separately but with reduced resolution.
  */
-#define ETP_2FT_FUZZ			0
+#define ETP_2FT_FUZZ			4

 #define ETP_2FT_XMIN			(  0 + ETP_2FT_FUZZ)
 #define ETP_2FT_XMAX			(288 - ETP_2FT_FUZZ)

diff -urNw stock-kernel/drivers/ril/ril.c linux/drivers/ril/ril.c
--- stock-kernel/drivers/ril/ril.c	2012-09-13 08:32:35.000000000 +0200
+++ linux/drivers/ril/ril.c	2012-11-26 19:38:59.000000000 +0100
@@ -8,7 +8,7 @@
 #include <linux/switch.h>
 #include <linux/uaccess.h>
 #include <linux/workqueue.h>
-#include <../../arch/arm/mach-tegra/include/mach/board-cardhu-misc.h>
+#include "../../arch/arm/mach-tegra/include/mach/board-cardhu-misc.h"

 #include "pm-irq.h"
 #include "ril.h"
diff -urNw stock-kernel/net/wireless/chan.c linux/net/wireless/chan.c
--- stock-kernel/net/wireless/chan.c	2012-09-13 08:32:35.000000000 +0200
+++ linux/net/wireless/chan.c	2013-01-16 14:17:01.689868924 +0100
@@ -82,9 +82,12 @@
 {
 	struct ieee80211_channel *chan;
 	int result;
+	struct wireless_dev *mon_dev = NULL;

-	if (wdev && wdev->iftype == NL80211_IFTYPE_MONITOR)
+	if (wdev && wdev->iftype == NL80211_IFTYPE_MONITOR) {
+		mon_dev = wdev;
 		wdev = NULL;
+	}

 	if (wdev) {
 		ASSERT_WDEV_LOCK(wdev);
@@ -131,5 +134,8 @@
 	if (wdev)
 		wdev->channel = chan;

+	if (mon_dev)
+		mon_dev->channel = chan;
+
 	return 0;
 }
